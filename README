                  ecuda Extended CUDA C++ API release 2.x

These are the release notes for ecuda version 2.

WHAT IS ECUDA?

  ecuda is a C++ wrapper around the CUDA C API designed to closely resemble and
  be functionally equivalent to the C++ Standard Template Library (STL).
  Specifically: algorithms, containers, and iterators.

WHAT IS REQUIRED?

  ecuda is a header only API, and the only pre-requisite library is the CUDA API
  version 5 or later. It should work with any C++ compiler, but has been
  developed and tested with several versions of gcc (most recently 4.8.4) and
  clang 3.6. Visual Studio 2013 was also successfully tested.

  A correct setup should be able to compile the tools/print_device_info.cu
  program without issue. You can try:

    $ make print_device_info

  to identify any issues. When run, the program prints out a pretty summary of
  the current system's GPU hardware and capabilities.

DOCUMENTATION:

 - Documentation can be viewed online:

     https://baderlab.github.io/ecuda/

 - This is generated from the source files themselves using doxygen. The base
   directory contains a default doxygen.cfg file that will build a local copy of
   the documentation in the docs/html subdirectory. Make sure you have doxygen
   installed and run:

     $ doxygen doxygen.cfg

INSTALLING:

  Linux/MacOS:

   - As long as the include/ subdirectory is visible to the compiler, the API
     can be installed anywhere. cmake can also be used:

       $ cmake .
       $ sudo make install

     This will copy the contents of the include/ subdirectory to
     ${CMAKE_INSTALL_PREFIX}/include (usually /usr/local/include).

    - The tools/print_device_info.cu file is a program that displays a pretty
      summary of the current system's GPU hardware and capabilities. Running:

        $ mkdir bin
        $ cd bin
        $ cmake ../tools
        $ make

      should successfully compile the program. cmake should detect if CUDA is
      present on your system, so this is a good sanity check to make sure your
      system is in good shape to do CUDA development.

  Windows/Visual Studio:

    - The latest free Visual Studio at the time of last update was Visual
	  Studio Community 2015, but it is confirmed that CUDA 7.5 is not supported
      at this time. I managed to get everything working with Visual Studio
      Community 2013 on Windows 10. Here is my story:

	- Download and install Visual Studio Community 2013 from:

        https://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx

    - Download and install the Nvidia CUDA Toolkit from:

        http://developer.nvidia.com/cuda-downloads

      - The order is important since the CUDA installer integrates with any
        installed Visual Studio versions that it supports. Also note that in the
        successful configuration, only the following items in the CUDA
        installer's custom installation were left checked:

          CUDA Toolkit 7.5
          CUDA Visual Studio Integration 7.5

        The following items were already installed on the test system with equal
        or greater version numbers:

          Graphics Driver
          HD Audio Driver
          NVIDIA GeForce Experience
          PhysX System Software

        Do whatever makes the most sense for your situation.

    - Start Visual Studio and load the ecuda.sln solution file contained in the
      ecuda source tree (i.e. the directory this README is in).

    - The print_device_info project contains a source file that should build
      successfully at this point. Build the Release target, and
      bin/Release/print_device_info.exe should appear. Running this from
      the Windows command line should display a pretty summary of the current
      system's GPU hardware and capabilities.

    - When building a Debug target, Visual Studio's C++ Standard Library
      implementation does some kind of "iterator checking" that doesn't play
      nice with ecuda's custom iterators, causing erroneous assertion failures
      to get raised at runtime. Placing this at the beginning of a program will
      turn this off (and suppresses a warning about macro redefinition):

        #pragma warning(disable:4005)
        #undef _HAS_ITERATOR_DEBUGGING
        #pragma warning(default:4005)

    - Since ecuda is not actively developed on Windows, please report any issues
      or workarounds!

